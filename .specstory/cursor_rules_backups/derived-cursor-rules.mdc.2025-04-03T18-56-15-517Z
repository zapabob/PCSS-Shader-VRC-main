
## PROJECT OVERVIEW
This project aims to develop a high-quality PCSS shader for VRChat, compatible with modular avatars and resistant to AutoFIX removal.  The shader will provide improved lighting and shadows within the VRChat environment.  The shader must be compatible with VRCFury's auto-correction features. The shader must maintain functionality even when the avatar is rebuilt.

## CODE STYLE
Adhere to C# coding conventions.  Maintain consistent indentation and naming conventions.

## FOLDER ORGANIZATION
The project follows a standard Unity project structure.  Specific folders and file organization are detailed in the project's README.

## TECH STACK
- Unity
- C#
- VRChat SDK
- nadena.dev.modular_avatar.core (Added 2025-04-04)
- nadena.dev.ndmf (Added 2025-04-04)
- VRCFury (Added 2025-04-04)

## PROJECT-SPECIFIC STANDARDS
- All shader code must be well-commented and easy to understand.
- All scripts must include error handling and logging.
- Compatibility with VRChat's AutoFIX is mandatory. Implementations should leverage VRCFury's features for parameter persistence and mirror synchronization where appropriate.
- Compatibility with VRCFury's auto-correction features is mandatory.
- Code must be designed to maintain functionality across avatar rebuilds.  Utilize MAComponent, MAParameter, and MAMergeAnimator for robust modular avatar support and AutoFIX resistance.  All scripts must be designed to work seamlessly with modular avatars and resist removal by VRChat's AutoFIX feature.  Implementations should leverage VRCFury's features for parameter persistence and mirror synchronization.

## WORKFLOW & RELEASE RULES
- Use Git for version control.
- Follow the GitHub workflow outlined in the `.github` folder.
- Releases should be versioned and documented.

## REFERENCE EXAMPLES
- Refer to the `PCSSLightHandler.cs` and `PCSSLight.cs` files for example implementations of modular avatar compatibility and AutoFIX resistance. These files should utilize nadena.dev.modular_avatar.core and nadena.dev.ndmf for robust modular avatar support and AutoFIX resistance. Implementations should leverage VRCFury's features for parameter persistence and mirror synchronization where appropriate.  See updated `PCSSLightHandler.cs` and `PCSSLight.cs` for examples incorporating MAParameter and MAMergeAnimator.  Refer to the updated `PCSSLightHandler.cs`, `PCSSLight.cs`, and `PCSSLiltoonShader.shader` files for examples incorporating MAParameter, MAMergeAnimator, and best practices for modular avatar compatibility and AutoFIX resistance.  Updated examples for modular avatar compatibility and AutoFIX resistance are now available in `PCSSLightHandler.cs`, `PCSSLight.cs`, and `PCSSLiltoonShader.shader`.  These examples incorporate MAParameter, MAMergeAnimator, and VRCFury's features for parameter persistence and mirror synchronization.  Further examples demonstrating modular avatar compatibility and AutoFIX resistance, incorporating MAParameter, MAMergeAnimator and VRCFury features, are available in `PCSSLightHandler.cs`, `PCSSLight.cs`, and `PCSSLiltoonShader.shader`.

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- Documentation is maintained in markdown format.
- Version updates will be noted in the relevant sections of this file and the project README.
- Version 1.2.0 (8k support) released (2025-04-04)

## DEBUGGING
Standard Unity debugging techniques should be used.  Log errors and warnings to the console for easier troubleshooting.  Utilize robust error handling and logging within all scripts.

## FINAL DOs AND DON'Ts
- **DO** use the provided code examples as a starting point for development.
- **DO** thoroughly test your code before committing changes, ensuring compatibility with both modular avatars and AutoFIX, as well as VRCFury's auto-correction features and maintaining functionality across avatar rebuilds.
- **DO** ensure compatibility with modular avatars and AutoFIX using MAComponent, MAParameter, and MAMergeAnimator where appropriate.
- **DO** leverage VRCFury's features for enhanced AutoFIX resistance and mirror synchronization.
- **DON'T** commit incomplete or untested code.
- **DON'T** introduce breaking changes without thorough testing and documentation.