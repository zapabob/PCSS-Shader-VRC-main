
## PROJECT OVERVIEW
This project aims to develop a high-quality PCSS shader for VRChat, compatible with modular avatars and resistant to AutoFIX removal.  The shader will provide improved lighting and shadows within the VRChat environment.

## CODE STYLE
Adhere to C# coding conventions.  Maintain consistent indentation and naming conventions.

## FOLDER ORGANIZATION
The project follows a standard Unity project structure.  Specific folders and file organization are detailed in the project's README.

## TECH STACK
- Unity
- C#
- VRChat SDK
- nadena.dev.modular_avatar.core (Added 2025-04-04)
- nadena.dev.ndmf (Added 2025-04-04)

## PROJECT-SPECIFIC STANDARDS
- All shader code must be well-commented and easy to understand.
- All scripts must include error handling and logging.
- Compatibility with VRChat's AutoFIX is mandatory.

## WORKFLOW & RELEASE RULES
- Use Git for version control.
- Follow the GitHub workflow outlined in the `.github` folder.
- Releases should be versioned and documented.

## REFERENCE EXAMPLES
-  Refer to the `PCSSLightHandler.cs` file for an example implementation of modular avatar compatibility.


## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- Documentation is maintained in markdown format.
- Version updates will be noted in the relevant sections of this file and the project README.
- Version 1.2.0 (8k support) released (2025-04-04)

## DEBUGGING
Standard Unity debugging techniques should be used.  Log errors and warnings to the console for easier troubleshooting.

## FINAL DOs AND DON'Ts
- **DO** use the provided code examples as a starting point for development.
- **DO** thoroughly test your code before committing changes.
- **DO** ensure compatibility with modular avatars and AutoFIX.
- **DON'T** commit incomplete or untested code.
- **DON'T** introduce breaking changes without thorough testing and documentation.